// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Area {
  id       String     @id @default(cuid())
  name     String     @unique
  Location Location[]
}

model Location {
  id           String      @id @default(cuid())
  name         String      @unique
  summary      String      @db.Text
  address      String
  coordinates  String
  Review       Review[]
  Area         Area        @relation(fields: [areaName], references: [name], onDelete: Cascade)
  areaName     String
  sublocations String[]
  Media        Media[]
  FloorPlan    FloorPlan[]
}

model FloorPlan {
  id         String   @id @default(cuid())
  name       String
  url        String
  Location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
}

model Review {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  body            String   @db.Text
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  location        Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId      String
  upvotes         User[]   @relation("upvotes")
  downvotes       User[]   @relation("downvotes")
  // ratings are on a scale from 1-10
  overallRating   Int
  amenitiesRating Int
  comfortRating   Int
  locationRating  Int
}

model Media {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  url        String
  Location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  email         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  Review        Review[]
  upvotes       Review[]  @relation("upvotes")
  downvotes     Review[]  @relation("downvotes")
  admin         Boolean   @default(false)
  emailVerified Boolean?
  Media         Media[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
